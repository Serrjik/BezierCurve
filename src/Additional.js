// Файл со вспомогательными функциями.

/*
	Функция возвращает Биномиальный коэффициент (число сочетаний из n по k).
	Принимает n и k.
*/
// function C (n, k) {
// 	return factorial(n) / (factorial(k) * factorial(n - k))
// }
const C = memorize((n, k) => factorial(n) / (factorial(k) * factorial(n - k)))

// Функция возвращает факториал переданного числа.
const factorial = memorize(n => n < 2 ? 1 : n * factorial(n - 1))

/*
	Функция мемоизации (функция-обёртка над другой функцией).
	Функция принимает в качестве аргумента другую функцию. В случае одинаковых
	аргументов у принимаемой функции она возвращает результат предыдущего вызова
	этой функции.
*/
function memorize (func) {
	const history = {}

	/*
		Возвратить новую функцию,
		которая принимает все аргументы переданной функции.
	*/
	return function (...args) {
		// Создать ключ по аргументам.
		const key = JSON.stringify(args)

		// Если функции нет в объекте history:
		if (!history.hasOwnProperty(key)) {
			/*
				Вычислить функцию, передав в неё все аргументы,
				что были переданы в функцию-обработчик.
			*/
			const result = func(...args)
			/*
				Запомнить результат работы функции
				под конкретный кортеж аргументов.
			*/
			history[key] = result
		}

		return history[key]
	}
}

// Функция возвращает расстояние между 2-мя точками.
function getDist (x1, y1, x2, y2) {
	return ((x1 - x2)**2 + (y1 - y2)**2)**0.5
}

/*
	Функция считает длину прямых линий.
	Принимает точки, между которыми проходят эти прямые линии.
*/
function getCurveLength (points) {
	// Сумма длин прямых линий.
	let sum = 0

	// Пройти по всем точкам, кроме последней.
	for (let i = 0; i < points.length - 1; i++) {
		sum += getDist(
			points[i].x,
			points[i].y,
			points[i + 1].x,
			points[i + 1].y
		)
	}

	return sum
}

/*
	Функция возвращает точку, которая соответствует части расстояния между
	переданными точками. Принимает координаты начальной и конечной точек и
	часть пути между этими точками, которую нужно вернуть.
*/
function getPointBetween (x1, y1, x2, y2, part) {
	return {
		x: x1 + (x2 - x1) * part,
		y: y1 + (y2 - y1) * part,
	}
}